bind_rows(new_studies) -> srdb
read_csv("rs/Variance and N - Water manipulations.csv",
skip = 2,
col_types = "ddcdccccddcccdddddddddddc"
) %>%
filter(Study_number != 6066) %>%
select(
Study_number, Record_number, N, OtherFactor, Longitude, SD_Rs_annual, SD_Rh_annual,
SD_Rs_growingseason, Percent_control, SM_mean, SM_sd
) %>%
left_join(srdb, by = c("Study_number", "Record_number")) %>%
mutate(
SD_Rs_annual = SD_Rs_annual / 378.43, # converting from g per yr to Âµmol per s
SD_Rh_annual = SD_Rh_annual / 378.43, # this will make all final estimates comparable
Rs_annual = Rs_annual / 378.43,
Rh_annual = Rh_annual / 378.43,
Manipulation = case_when(
Percent_control < 100 ~ "Drought",
Percent_control > 100 ~ "Irrigation",
Percent_control == 100 ~ "Control",
TRUE ~ NA_character_
)
) -> dat_rs
install.packages("amerifluxr")
library(amerifluxr)
?ameriflux
?ameriflux
help(package = "ameriflux")
help(package = "amerifluxr")
install.packages("pander")
install.packages("data.table")
library(pander)
library(data.table)
sites <- amf_site_info()
sites_dt <- data.table::as.data.table(sites)
pander::pandoc.table(sites_dt[!is.na(DATA_START), .N, by = .(IGBP, DATA_POLICY)][order(IGBP)])
possible_ls <- sites_dt[IGBP %in% c("BSV", "CSH", "CVM",
"DBF", "DNF", "EBF",
"ENF", "GRA", "MF",
"OSH","SAV","WSA") &
!is.na(DATA_START) &
LOCATION_LAT < 50 &
DATA_POLICY == "CCBY4.0",
.(SITE_ID, SITE_NAME, DATA_START, DATA_END)]
data_aval <- data.table::as.data.table(amf_list_data(site_set = possible_ls$SITE_ID))
pander::pandoc.table(data_aval[c(1:10), ])
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","SWC"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","SWC"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
crols2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
pander::pandoc.table(crop_ls2)
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","SWC"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
crols2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
pander::pandoc.table(crop_ls2)
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
pander::pandoc.table(ls2)
amf_plot_datayear(
site_set = crop_ls2$SITE_ID,
var_set = c("FCH4", "SWC"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = c("FCH4", "SWC"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = c("FCH4", "SWC_2_1_1"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = c("FCH4", "SWC"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = c("FCH4"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = "FCH4",
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
View(data_aval_sub)
data_aval_sub <- data_aval[data_aval$BASENAME %in% "FCH4",
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
pander::pandoc.table(ls2)
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
pander::pandoc.table(ls2)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = "CH4",
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = "CH4",
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
possible_ls <- sites_dt[IGBP %in% c("BSV", "CSH", "CVM",
"DBF", "DNF", "EBF",
"ENF", "GRA", "MF",
"OSH","SAV","WSA") &
!is.na(DATA_START) &
LOCATION_LAT < 60 &
DATA_POLICY == "CCBY4.0",
.(SITE_ID, SITE_NAME, DATA_START, DATA_END)]
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID)]
View(data_aval_sub)
data_aval_sub2<- data_aval_sub2[, lapply(.SD, mean, Y2015 + Y2016 + Y2017 + Y2018),
by = .(SITE_ID)]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
data_aval_sub2 <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub2<- data_aval_sub2[, lapply(.SD, mean),
by = .(SITE_ID)]
options(datatable.optimize=1
)
options(datatable.optimize=1)
data_aval_sub2<- data_aval_sub2[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
data_aval_sub2 <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub2<- data_aval_sub2[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017")]
data_aval_sub2 <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub2<- data_aval_sub2[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
ls2 <- data_aval_sub[(Y2016 + Y2017 + Y2018) / 4 > 0.75]
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.75]
pander::pandoc.table(ls2)
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.50]
pander::pandoc.table(ls2)
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.20]
pander::pandoc.table(ls2)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = "CH4",
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4","CH4","SWC"),
.(SITE_ID, BASENAME, Y2015, Y2016, Y2017, Y2018)]
data_aval_sub <- data_aval_sub[, lapply(.SD, mean),
by = .(SITE_ID),
.SDcols = c("Y2015", "Y2016", "Y2017", "Y2018")]
ls2 <- data_aval_sub[(Y2015 + Y2016 + Y2017 + Y2018) / 4 > 0.20]
pander::pandoc.table(ls2)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = c("FCH4","CH4","SWC"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
amf_plot_datayear(
site_set = ls2$SITE_ID,
var_set = c("FCH4","CH4"),
nonfilled_only = TRUE,
year_set = c(2015:2018)
)
pander::pandoc.table(ls2)
update(R)
updateR()
install.packages(c("blob", "bookdown", "broom", "caret", "commonmark", "conquer", "crayon", "DEoptimR", "desc", "DT", "extrafont", "fansi", "geojsonsf", "gert", "ggExtra", "ggpmisc", "ggpp", "haven", "igraph", "kernlab", "knitr", "leafem", "leaflet", "lme4", "magrittr", "maptools", "mapview", "matrixStats", "MuMIn", "openssl", "parallelly", "plyr", "polynom", "processx", "psych", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "rgdal", "rlang", "rmarkdown", "robustbase", "rprojroot", "RSQLite", "sass", "scales", "seriation", "sf", "skimr", "spatstat", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.sparse", "testthat", "tinytex", "tmap", "tzdb", "uuid", "vctrs", "waldo", "webshot", "withr", "xfun", "zoo"))
install.packages(c("fansi", "kernlab", "lme4", "magrittr", "Rcpp", "rlang", "robustbase", "vctrs"))
install.packages(c("fansi", "kernlab", "lme4", "magrittr", "Rcpp", "rlang", "robustbase", "vctrs"))
?amf_download_big
?amf_download_bif
library(amerifluxr)
library(pander)
library(data.table)
?amf_download_bif
KM_meta <- amf_download_bif(
user_id = "kendalynnm",
user_email = "kendalynn.morris@pnnl.gov",
data_policy = "CCBY4.0",
agree_policy = TRUE,
intended_use = "synthesis",
intended_use_text = "methane fluxes across soil moisture contents",
verbose = TRUE,
out_dir = getwd()
)
getwd()
?system.file
rm(list=ls())
library(amerifluxr)
library(pander)
library(data.table)
getwd()
#check working directory, set if needed
setwd("methane/methane-synthesis/")
#check working directory, set if needed
#setwd("methane/methane-synthesis/")
library(amerifluxr)
library(pander)
library(data.table)
#read in the first site
BR_Npw <- amf_read_base(
file = "AMF_BR-Npw_BASE-BADM_1-5.zip",
unzip = TRUE,
parse_timestamp = TRUE)
View(BR_Npw)
#read in metadata
MD <- amf_read_bif(file = "AMF_AA-Net_BIF_CCBY4_20220228.xlsx")
#subset by target site
BR_Npw_MD <- MD[MD$SITE_ID == "BR_Npw",]
View(BR_Npw)
#subset by target site
BR_Npw_MD <- MD[MD$SITE_ID == "BR-Npw",]
View(BR_Npw_MD)
unique(MD$VARIABLE_GROUP)
unique(BR_Npw_MD$VARIABLE_GROUP)
View(BR_Npw_MD)
paper <- amf_extract_badm(bif_data = BR_Npw_MD,
select_group = "GRP_REFERENCE_PAPER")
paper
#read in the first site
Ho1 <- amf_read_base(
file = "AMF_US-Ho1_BASE-BADM_7-5.zip",
unzip = TRUE,
parse_timestamp = TRUE)
#subset by target site
Ho1_MD <- MD[MD$SITE_ID == "Ho1",]
unique(Ho1_MD$VARIABLE_GROUP)
View(Ho1)
View(Ho1)
#subset by target site
Ho1_MD <- MD[MD$SITE_ID == "US-Ho1",]
unique(Ho1_MD$VARIABLE_GROUP)
paper <- amf_extract_badm(bif_data = Ho1_MD,
select_group = "GRP_REFERENCE_PAPER")
paper
unique(Ho1_MD$VARIABLE_GROUP)
fluxes <- amf_extract_badm(bif_data = Ho1_MD,
select_group = "GRP_FLUX_MEASUREMENTS")
fluxes
soilchem <- amf_extract_badm(bif_data = Ho1_MD,
select_group = "GRP_SOIL_CHEM")
soilchem
#get data summary for 9 sites with methane fluxes
data_sum <- amf_summarize_data(site_set = data_aval_sub$SITE_ID,
var_set = c("FCH4", "SWC"))
sites <- amf_site_info()
sites_dt <- data.table::as.data.table(sites)
#all sites that are CCBY4.0 and not wetlands or agriculture
possible_ls <- sites_dt[IGBP %in% c("BSV", "CSH", "CVM",
"DBF", "DNF", "EBF",
"ENF", "GRA", "MF",
"OSH","SAV","WSA") &
!is.na(DATA_START) &
LOCATION_LAT < 60 &
DATA_POLICY == "CCBY4.0",
.(SITE_ID, SITE_NAME, DATA_START, DATA_END)]
data_aval <- data.table::as.data.table(amf_list_data(site_set = possible_ls$SITE_ID))
#now filter by those upland sites methane flux data
data_aval_sub <- data_aval[data_aval$BASENAME %in% c("FCH4"),
.(SITE_ID, BASENAME)]
#get data summary for 9 sites with methane fluxes
data_sum <- amf_summarize_data(site_set = data_aval_sub$SITE_ID,
var_set = c("FCH4", "SWC"))
pander::pandoc.table(data_sum)
unique(Ho1_MD$VARIABLE_GROUP)
getwd()
library(dplyr)
library(tidyr)
library(readr)
library(amerifluxr)
View(results)
head(is.na(results$value))
is.na(results$value)
test <- results[is.na(results)]
test <- results[is.na(results),]
test
remove(test)
colnames(results)
unique(site) -> TS_check
results %>%
select(variable = "TS") %>%
unique(site) -> TS_check
results %>%
select(variable = TS) %>%
unique(site) -> TS_check
results %>%
select(variable = TS) %>%
unique(site) -> TS_check
results %>%
select(variable == TS) %>%
unique(site) -> TS_check
results %>%
select(variable == TS) %>%
unique(site) -> TS_check
results %>%
filter(variable == TS) %>%
unique(site) -> TS_check
results %>%
filter(variable == "TS") %>%
unique(site) -> TS_check
results %>%
filter(variable = "TS") %>%
unique(site) -> TS_check
results %>%
filter(variable = TS) %>%
unique(site) -> TS_check
results %>%
filter(variable == TS) %>%
unique(site) -> TS_check
results %>%
filter(variable == "TS") %>%
unique(site) -> TS_check
results %>%
subset(variable == "TS") %>%
unique(site) -> TS_check
results %>%
subset(variable == "TS") -> TS_check
unique(TS_check$sites)
View(TS_check)
unique(TS_check$site)
length(unique(TS_check$site))
View(results)
library(dplyr)
library(tidyr)
library(readr)
library(amerifluxr)
#get names of sites to process
sites <- c("BR-Npw", "US-Ho1", "US-Jo1", "US-JRn", "US-NC2", "US-PFa", "US-Sne", "US-Snf", "US-Tur")
#for loop: f in names of files
#TIMESTAMP start and end still coming through
#read in data
results <- list()
#for loop: f in names of files
#TIMESTAMP start and end still coming through
#read in data
results <- list()
tf <- "tempfile.csv"
if(file.exists(tf)) file.remove(tf)
for (site in sites) {
filename <- list.files(pattern = site)
message (site," Found ", length(filename), " files")
dat_raw <- amf_read_base(file = filename,
unzip = TRUE,
parse_timestamp = TRUE)
#columns to keep
ctk <- grep("^(TIMESTAMP$|CO2|CH4|FC|FCH4|PA|^P$|^P_|SWC|^TA$|^TA_|TS|WTD)", colnames(dat_raw))
message ("Data has ", ncol(dat_raw), " keeping ", length(ctk))
dat <- dat_raw[ctk]
# reshape data to long form and add site name
dat <- dat %>%
pivot_longer(-TIMESTAMP) %>%
separate(name, into = c("variable", "other"),
sep = "_", extra="merge", fill="right") %>%
drop_na(value)
dat$site <- site
write_csv(dat, file = tf, append = TRUE, col_names = !file.exists(tf))
}
results <- read.csv(tf)
results %>%
subset(variable == "TS") -> TS_check
length(unique(TS_check$site))
unique(TS_check$site)
unique(results$site)
View(results)
length(is.na(results$value == TRUE))
results[is.na(results$value),]
remove(TS_check)
results %>%
filter(variable == "TS", other == "_1_2_1") %>%
unique(site)
results %>%
filter(variable == "TS", other == "_1_2_1") %>%
unique(results$site)
library(dplyr)
library(tidyr)
library(ggplot2)
library(metafor)
library(broom)
#methane dataset gathered by Emily Kang
EK_meth <- read.csv("EK_methane.csv")
#need to convert all values to common units of mg CH4 m2 d
unique(EK_meth$Unit)
#create conversion factors
con_fac <- c("kg CH4 ha" = 0.2739726,
"ug C m2 h" = 0.03197342,
"mg CH4 m2 h" = 24,
"mg CH4 m2 d" = 1)
#convert all fluxes to mg CH4 m2 d
EK_meth %>%
mutate(cf = con_fac[Unit],
CH4_control = CH4_control * cf,
SD_CH4_control =  SD_CH4_control * cf,
SE_CH4_control = SE_CH4_control * cf,
CH4_manip = CH4_manip * cf,
SD_CH4_manip =  SD_CH4_manip * cf,
SE_CH4_manip = SE_CH4_manip * cf,
Unit = "mg CH4 m2 d",
Manipulation = case_when(
Percent_control < 100 ~ "Drought",
Percent_control > 100 ~ "Irrigation",
TRUE ~ NA_character_))-> EK_meth
original <- EK_meth$SD_CH4_control
new <- EK_meth$SD_CH4_control
#Calculate SD from SE
gaps1 <- is.na(EK_meth$SD_CH4_control)
gaps2 <- is.na(EK_meth$SD_CH4_manip)
EK_meth$SD_CH4_control[gaps1] <- EK_meth$SE_CH4_control[gaps1]*sqrt(EK_meth$N_control[gaps1])
EK_meth$SD_CH4_manip[gaps2] <- EK_meth$SE_CH4_manip[gaps2]*sqrt(EK_meth$N_manip[gaps2])
ggplot(EK_meth,
aes(Percent_control, CH4_manip - CH4_control)) +
geom_point() +
geom_line() +
facet_grid(. ~ Manipulation, scales = "free")
#Calculate effect sizes
methdat <- escalc(
measure = "ROM",
m1i = CH4_manip, m2i = CH4_control,
sd1i = SD_CH4_manip, sd2i = SD_CH4_control,
n1i = N_manip, n2i = N_control,
data = EK_meth
)
#Run meta analysis
meth_model <- rma.mv(yi, vi,
random = ~ 1 | X,
mods = ~ Manipulation * Ecosystem_type * Percent_control - 1,
method = "REML",
data = methdat,
slab = Ecosystem_type,
)
summary(meth_model)
methMA <- tidy(meth_model)
profile(meth_model)
forest.rma(meth_model)
funnel(meth_model)
library(cosore)
library(ggplot2)
library(tibble)
#load database
x <- csr_database()
#check for methane studies
unique(x$CSR_GASES)
#studies with both CO2 and CH4
x_both <- subset(x, CSR_GASES == "CO2, CH4")
unique(x_both$CSR_DATASET)
#example of data
dat <- csr_dataset("d20190610_SIHI_H2wetland")
raw_dat <- dat$data
unique(raw_dat$CSR_PORT)
ggplot(raw_dat[raw_dat$CSR_PORT == c("4","6"),], aes(CSR_FLUX_CO2, CSR_FLUX_CH4)) +
geom_point() +
facet_grid(CSR_PORT~., scales = "free") + ggtitle("Methane Flux vs Soil Moisture")
#studies with only CH4
x_meth <- subset(x, CSR_GASES == "CH4")
#only one study that only has methane data, same plot
dat_ch4 <- csr_dataset("d20200407_WANG")
raw_Mdat <- dat_ch4$data
unique(raw_Mdat$CSR_PORT)
ggplot(raw_Mdat, aes(CSR_SM10, CSR_FLUX_CH4)) +
geom_point() +
facet_grid(CSR_PORT~., scales = "free") +
ggtitle("Methane Flux vs Soil Moisture")
